name: Debug Test Workflow

on:
  push:
    branches: [master]

jobs:
  debug-test:
    runs-on: ubuntu-latest
    name: 调试测试

    steps:
    - name: 初始化
      run: echo "开始调试测试"

    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 测试基本shell功能
      run: |
        echo "🔧 测试基本shell功能..."

        # 测试heredoc
        TEST_HEREDOC=$(cat <<'EOF'
这是一个测试
多行中文内容
带特殊字符：@#$%^&*()
EOF
        )

        echo "✅ Heredoc测试通过"
        echo "内容长度: ${#TEST_HEREDOC}"
        echo "内容: $TEST_HEREDOC"

    - name: 测试变量替换
      run: |
        echo "🔄 测试变量替换..."

        FILES="test.txt debug.yml"
        PROMPT_TEMPLATE="请分析文件：FILES_PLACEHOLDER"

        FINAL_PROMPT=$(echo "$PROMPT_TEMPLATE" | sed "s|FILES_PLACEHOLDER|$FILES|g")

        echo "✅ 变量替换测试通过"
        echo "原始模板: $PROMPT_TEMPLATE"
        echo "最终结果: $FINAL_PROMPT"

    - name: 测试JSON转义
      run: |
        echo "📋 测试JSON转义..."

        CHINESE_TEXT="请分析这个代码：\nfunction test() {\n  return '你好世界';\n}"

        if command -v jq &> /dev/null; then
            JSON_ESCAPED=$(echo "$CHINESE_TEXT" | jq -sR .)
            echo "✅ JSON转义测试通过"
            echo "原始文本: $CHINESE_TEXT"
            echo "转义结果: $JSON_ESCAPED"
        else
            echo "❌ jq未安装"
            exit 1
        fi

    - name: 测试API调用
      run: |
        echo "🚀 测试API调用..."

        # 构建简单请求
        SIMPLE_REQUEST='{
          "model": "glm-4.6",
          "max_tokens": 100,
          "messages": [{"role": "user", "content": "简单测试"}]
        }'

        echo "请求体: $SIMPLE_REQUEST"

        # 调用API
        HTTP_CODE=$(curl \
          --silent \
          --show-error \
          --max-time 30 \
          --request POST \
          --url "https://apis.iflow.cn/v1/chat/completions" \
          --header "Content-Type: application/json; charset=utf-8" \
          --header "Authorization: Bearer ${{ secrets.UPSTREAM_API_KEY }}" \
          --data "$SIMPLE_REQUEST" \
          --output "test_response.json" \
          --write-out "%{http_code}")

        echo "📊 HTTP状态码: $HTTP_CODE"

        if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ API调用成功"
            if [ -f "test_response.json" ]; then
                echo "响应内容:"
                cat test_response.json | jq . || cat test_response.json
            fi
        else
            echo "❌ API调用失败，状态码: $HTTP_CODE"
            if [ -f "test_response.json" ]; then
                echo "错误响应:"
                cat test_response.json
            fi
            exit 1
        fi

    - name: 测试完整流程
      run: |
        echo "🔬 测试完整的多流程..."

        # 1. 构建复杂提示词
        COMPLEX_PROMPT=$(cat <<'EOF'
请分析以下代码变更：

## 变更文件
FILE_LIST_PLACEHOLDER

## 代码差异
DIFF_PLACEHOLDER

请从以下维度分析：
1. 代码质量
2. 性能影响
3. 安全风险

请用中文回复。
EOF
        )

        # 2. 替换占位符
        TEST_FILES="src/main.py docs/README.md"
        TEST_DIFF="新增了一个函数\n优化了性能"

        FINAL_PROMPT=$(echo "$COMPLEX_PROMPT" | sed "s|FILE_LIST_PLACEHOLDER|$TEST_FILES|g")
        FINAL_PROMPT=$(echo "$FINAL_PROMPT" | sed "s|DIFF_PLACEHOLDER|$TEST_DIFF|g")

        # 3. JSON转义
        JSON_PROMPT=$(echo "$FINAL_PROMPT" | jq -sR .)

        # 4. 构建请求体
        FINAL_REQUEST=$(cat <<EOF
        {
          "model": "glm-4.6",
          "max_tokens": 500,
          "temperature": 0.3,
          "messages": [
            {
              "role": "user",
              "content": $JSON_PROMPT
            }
          ]
        }
        EOF
        )

        echo "📝 完整流程测试..."
        echo "提示词长度: ${#FINAL_PROMPT}"

        # 5. API调用
        HTTP_CODE=$(curl \
          --silent \
          --show-error \
          --max-time 30 \
          --request POST \
          --url "https://apis.iflow.cn/v1/chat/completions" \
          --header "Content-Type: application/json; charset=utf-8" \
          --header "Authorization: Bearer ${{ secrets.UPSTREAM_API_KEY }}" \
          --data "$FINAL_REQUEST" \
          --output "complex_response.json" \
          --write-out "%{http_code}")

        echo "📊 复杂请求状态码: $HTTP_CODE"

        if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ 完整流程测试成功"
            if [ -f "complex_response.json" ]; then
                ANALYSIS=$(jq -r '.choices[0].message.content // "解析失败"' complex_response.json)
                echo "AI分析结果:"
                echo "$ANALYSIS"
            fi
        else
            echo "❌ 完整流程测试失败"
            if [ -f "complex_response.json" ]; then
                cat complex_response.json
            fi
            exit 1
        fi

    - name: 收集调试信息
      if: always()
      run: |
        echo "## 🎯 调试测试摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ 所有测试通过" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 Shell功能正常" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 变量替换正常" >> $GITHUB_STEP_SUMMARY
            echo "- 📋 JSON转义正常" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 API调用正常" >> $GITHUB_STEP_SUMMARY
            echo "- 🔬 完整流程正常" >> $GITHUB_STEP_SUMMARY
        else
            echo "### ❌ 测试失败" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 需要检查失败的步骤" >> $GITHUB_STEP_SUMMARY
            echo "- 🗂️ 查看详细日志文件" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 上传调试文件
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-files-${{ github.run_number }}
        path: |
          *.json
          *.log
        retention-days: 3