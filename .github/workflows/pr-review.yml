name: Pull Request Review Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-analysis:
    runs-on: ubuntu-latest
    name: Code Analysis & Review

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml flake8 pytest

      - name: Get PR Diff
        id: pr-diff
        run: |
          git diff origin/${{ github.base_ref }}...HEAD --name-only > changed_files.txt
          git diff origin/${{ github.base_ref }}...HEAD > full_diff.txt
          echo "changed_files=$(cat changed_files.txt | wc -l)" >> $GITHUB_OUTPUT
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          cat full_diff.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate Code Review
        id: generate-review
        env:
          PR_NUMBER: ${{ github.event.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          CHANGED_FILES: ${{ steps.pr-diff.outputs.changed_files }}
          DIFF_CONTENT: ${{ steps.pr-diff.outputs.diff_content }}
        run: |
          python3 << 'EOF'
          import os
          import re
          import json
          import subprocess

          class PRReviewer:
              def __init__(self):
                  self.pr_number = os.getenv('PR_NUMBER')
                  self.author = os.getenv('PR_AUTHOR')
                  self.title = os.getenv('PR_TITLE')
                  self.body = os.getenv('PR_BODY')
                  self.changed_files = int(os.getenv('CHANGED_FILES', '0'))
                  self.diff_content = os.getenv('DIFF_CONTENT', '')

              def analyze_changes(self):
                  analysis = {
                      'file_count': self.changed_files,
                      'lines_added': 0,
                      'lines_deleted': 0,
                      'file_types': set(),
                      'risk_level': 'low'
                  }

                  for line in self.diff_content.split('\n'):
                      if line.startswith('+') and not line.startswith('+++'):
                          analysis['lines_added'] += 1
                      elif line.startswith('-') and not line.startswith('---'):
                          analysis['lines_deleted'] += 1

                  for line in self.diff_content.split('\n'):
                      if line.startswith('diff --git'):
                          match = re.search(r'\.(\w+)$', line)
                          if match:
                              analysis['file_types'].add(match.group(1))

                  if analysis['lines_added'] > 500 or analysis['lines_deleted'] > 500:
                      analysis['risk_level'] = 'high'
                  elif analysis['lines_added'] > 100 or analysis['lines_deleted'] > 100:
                      analysis['risk_level'] = 'medium'

                  if 'py' in analysis['file_types']:
                      core_files = ['server.py', 'converter.py', 'config.py']
                      for core_file in core_files:
                          if core_file in self.diff_content:
                              analysis['risk_level'] = max(analysis['risk_level'], 'medium')
                              break

                  return analysis

              def generate_review_comment(self, analysis):
                  risk_level = analysis['risk_level']
                  file_types_str = ', '.join(sorted(analysis['file_types']))

                  comment = "## Code Review Bot Analysis\n\n### Change Statistics\n"
                  comment += f"- File Count: {analysis['file_count']} files\n"
                  comment += f"- Code Lines: +{analysis['lines_added']} / -{analysis['lines_deleted']}\n"
                  comment += f"- Affected File Types: {file_types_str}\n"
                  comment += f"- Risk Level: {risk_level.upper()}\n\n### Review Points\n\n"

                  if 'py' in analysis['file_types']:
                      comment += "**Python Code Check:**\n"
                      if 'server.py' in self.diff_content:
                          comment += "- Server logic changes fully tested?\n"
                          comment += "- API changes backward compatible?\n"
                      if 'converter.py' in self.diff_content:
                          comment += "- Format conversion covers all use cases?\n"
                          comment += "- Error handling mechanisms complete?\n"

                  if 'json' in analysis['file_types']:
                      comment += "**Configuration File Check:**\n"
                      comment += "- Configuration changes provide default values?\n"
                      comment += "- Sensitive information removed?\n"

                  if analysis['lines_added'] > 100:
                      comment += f"\nLarge Change Reminder: This PR involves {analysis['lines_added']} lines of new code, please ensure:\n"
                      comment += "- Code splitting follows single responsibility principle\n"
                      comment += "- Appropriate comments and documentation\n"
                      comment += "- Complete test coverage\n"

                  comment += f"\n### Next Actions\n\n"

                  if risk_level == 'high':
                      comment += "Needs Attention: High-risk changes, recommend detailed review by at least one maintainer.\n"
                  elif analysis['lines_added'] > 50:
                      comment += "Can Merge: Code quality is good, suggest confirmation from another developer before merging.\n"
                  else:
                      comment += "Can Merge: Small changes, can be merged directly.\n"

                  comment += f"\n---\n\nThis comment is automatically generated by PR Review Bot | {self.author} PR #{self.pr_number}"

                  return comment

              def assign_labels(self, analysis):
                  labels = []
                  risk_level = analysis['risk_level']

                  if risk_level == 'high':
                      labels.append('high-risk')
                  elif risk_level == 'medium':
                      labels.append('needs-review')

                  if 'py' in analysis['file_types']:
                      labels.append('python')

                  if analysis['lines_added'] > 100:
                      labels.append('large-change')
                  elif analysis['lines_added'] > 20:
                      labels.append('medium-change')
                  else:
                      labels.append('small-change')

                  return labels

          reviewer = PRReviewer()
          analysis = reviewer.analyze_changes()
          comment = reviewer.generate_review_comment(analysis)
          labels = reviewer.assign_labels(analysis)

          print(f"PR Analysis: {json.dumps(analysis)}")
          print("GENERATED_COMMENT<<EOF")
          print(comment)
          print("EOF")
          print(f"LABELS:{json.dumps(labels)}")
          EOF

      - name: Apply PR Labels
        uses: actions/github-script@v6
        with:
          script: |
            const output = `
            ${{
              steps.generate-review.outputs.generated_comment
            }}
            `;

            const labelsMatch = output.match(/LABELS:(.+)/);
            if (labelsMatch) {
              try {
                const labels = JSON.parse(labelsMatch[1]);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: labels
                });
              } catch (error) {
                console.log('Failed to parse labels:', error);
              }
            }

      - name: Post Review Comment
        uses: actions/github-script@v6
        with:
          script: |
            const output = `
            ${{
              steps.generate-review.outputs.generated_comment
            }}
            `;

            const commentMatch = output.match(/GENERATED_COMMENT<<EOF([\s\S]*?)EOF/);
            if (commentMatch) {
              const comment = commentMatch[1].trim();

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Run Tests
        run: |
          python -m pytest tests/ --tb=short --no-header -q --junitxml=test-results.xml

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.xml

      - name: Security Check
        run: |
          echo "Checking for secrets..."
          if git diff origin/${{ github.base_ref }}...HEAD | grep -E "(password|secret|key|token)" | grep -v "test" | grep -v "example"; then
            echo "Potential secrets found in diff"
            exit 1
          else
            echo "No obvious secrets found"
          fi