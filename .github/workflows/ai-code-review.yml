name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, edited]
  push:
    branches: [main, master]

jobs:
  code-review:
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Code Analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Changed Files
      id: changed_files
      run: |
        echo "Analyzing code changes..."

        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
        else
          BASE="${{ github.event.before }}"
          HEAD="${{ github.sha }}"
        fi

        CHANGED_FILES=$(git diff --name-only "$BASE" "$HEAD" | tr '\n' ' ')
        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

        echo "📝 Changed files: $CHANGED_FILES"

    - name: AI Code Review
      id: ai-review
      run: |
        echo "🧠 Starting comprehensive code review..."

        FILES="${{ steps.changed_files.outputs.files }}"

        # 专业的代码审查提示词
        REVIEW_PROMPT="作为资深软件工程专家，基于多年企业级项目开发和代码审查经验，请对此次代码变更进行深度技术评审：

**变更概览**
- 文件列表：$FILES
- 审查目标：确保代码质量、系统稳定性和团队协作效率

**核心审查维度**

**🏗️ 架构与设计质量**
- 设计模式应用是否恰当，是否符合SOLID原则
- 模块耦合度和内聚性分析
- 接口设计的合理性评估
- 长期可维护性和扩展性考量

**⚡ 性能与效率**
- 算法复杂度和时间/空间效率分析
- 资源使用模式评估（内存、CPU、I/O）
- 潜在性能瓶颈识别和优化建议
- 缓存策略和数据库查询优化

**🔒 安全性与健壮性**
- 输入验证和数据校验完整性
- 异常处理机制的健壮性
- 安全漏洞检查（SQL注入、XSS、权限绕过等）
- 敏感数据处理的合规性

**🛠️ 代码规范与工程实践**
- 编码风格统一性和可读性
- 代码复用性和DRY原则遵循
- 日志记录和监控集成
- 错误处理和调试友好性

**📋 测试策略与质量保证**
- 单元测试、集成测试覆盖度建议
- 边界条件和异常场景测试要点
- 性能测试和安全测试的必要性
- 代码审查流程改进建议

**📌 输出格式要求**
- 结构化分析，按优先级排序问题
- 提供可操作的具体改进方案
- 标注影响范围和修复复杂度
- 给出最佳实践参考示例

请进行全面的技术评估并提供建设性的改进指导。"

        echo "📤 Sending code review request to AI..."

        AI_RESPONSE=$(curl -s -X POST "https://apis.iflow.cn/v1/chat/completions" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.UPSTREAM_API_KEY }}" \
          -d '{
            "model": "glm-4.6",
            "max_tokens": 2000,
            "temperature": 0.2,
            "messages": [
              {
                "role": "user",
                "content": "'"$REVIEW_PROMPT"'"
              }
            ]
          }')

        if command -v jq &> /dev/null; then
          CONTENT=$(echo "$AI_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null || echo "AI响应解析失败")
        else
          CONTENT=$(echo "$AI_RESPONSE" | grep -o '"content":"[^"]*"' | cut -d'"' -f4 || echo "响应格式异常")
        fi

        echo "📥 AI Code Review Results:"
        echo "$CONTENT"

        # 设置输出变量供PR评论使用
        echo "review<<EOF" >> $GITHUB_OUTPUT
        echo "$CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const review = `${{ steps.ai-review.outputs.review }}`;

          const comment = `## 🤖 AI 代码审查报告

${review}

---

### 📊 审查信息
- **审查模型**: GLM-4.6
- **审查时间**: ${new Date().toLocaleString('zh-CN')}
- **变更文件**: `${{ steps.changed_files.outputs.files }}`
- **审查方式**: 静态分析，不影响代码合并

> 📋 *此报告由 AI 自动生成，仅供参考。请结合人工审查进行最终判断。`;

          if (context.payload.pull_request) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Summary Report
      run: |
        echo "## 🎯 代码审查完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 审查结果" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 完成专业代码质量分析" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 已分析文件：${{ steps.changed_files.outputs.files }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 使用 GLM-4.6 模型" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 PR 评论已${{ github.event_name == 'pull_request' && '添加' || '跳过' }}" >> $GITHUB_STEP_SUMMARY

  issue-review:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    name: Issue Analysis

    steps:
    - name: Issue Review
      id: issue-review
      run: |
        echo "🔍 Analyzing issue: #${{ github.event.issue.number }}"

        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_BODY="${{ github.event.issue.body }}"
        ISSUE_AUTHOR="${{ github.event.issue.user.login }}"

        # 专业的Issue审查提示词
        ISSUE_PROMPT="作为资深技术总监和产品架构师，基于丰富的项目管理和需求分析经验，请对以下GitHub Issue进行深度可行性评估：

**Issue基础信息**
- 标题：$ISSUE_TITLE
- 发起者：$ISSUE_AUTHOR
- 请求详情：$ISSUE_BODY

**🎯 需求清晰度与完整性分析**
- 问题陈述的准确性和具体程度评估
- 功能需求边界是否明确，是否存在二义性
- 预期结果和验收标准是否清晰定义
- 是否需要进一步的需求澄清和补充信息

**🏗️ 技术可行性与架构适配性**
- 当前技术栈对此需求的支持能力评估
- 是否需要引入新的技术组件或第三方服务
- 与现有系统架构的兼容性分析
- 技术债务影响和维护成本考量

**⚙️ 实现复杂度与资源评估**
- 开发工作量预估（人天）：具体的技术难点和解决方案路径
- 依赖关系分析：外部API、第三方服务、团队协作需求
- 风险识别：技术风险、进度风险、资源风险
- 测试策略：单元测试、集成测试、端到端测试的覆盖规划

**📊 业务价值与优先级排序**
- 用户价值评估和业务影响程度
- 与产品路线图的契合度分析
- 市场竞争优势和差异化价值
- ROI（投资回报率）初步评估

**⚡ 解决方案与实施路径**
- 技术架构建议和设计方案框架
- 关键里程碑和交付物规划
- 潜在的替代方案和技术选型建议
- 长期维护和迭代优化策略

**📋 评估结论与行动建议**
- 明确的可行性结论（高/中/低优先级）
- 具体的下一步行动项
- 团队协作建议和时间安排
- 风险缓解措施和应急预案

请提供结构化的专业评估报告，包含明确的可操作建议和决策依据。"

        echo "📤 Sending issue review request to AI..."

        AI_RESPONSE=$(curl -s -X POST "https://apis.iflow.cn/v1/chat/completions" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.UPSTREAM_API_KEY }}" \
          -d '{
            "model": "glm-4.6",
            "max_tokens": 1500,
            "temperature": 0.2,
            "messages": [
              {
                "role": "user",
                "content": "'"$ISSUE_PROMPT"'"
              }
            ]
          }')

        if command -v jq &> /dev/null; then
          CONTENT=$(echo "$AI_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null || echo "AI响应解析失败")
        else
          CONTENT=$(echo "$AI_RESPONSE" | grep -o '"content":"[^"]*"' | cut -d'"' -f4 || echo "响应格式异常")
        fi

        echo "📥 AI Issue Analysis Results:"
        echo "$CONTENT"

        # 设置输出变量供Issue评论使用
        echo "issue_review<<EOF" >> $GITHUB_OUTPUT
        echo "$CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Issue Comment
      uses: actions/github-script@v7
      with:
        script: |
          const issueTitle = "${{ github.event.issue.title }}";
          const issueNumber = context.issue.number;

          // 获取AI分析结果
          const analysis = `
## 🔍 Issue AI 分析报告

${{ steps.issue-review.outputs.issue_review }}

---

### 📋 分析信息
- **Issue标题**: ${issueTitle}
- **Issue编号**: #${issueNumber}
- **分析师**: AI Assistant (GLM-4.6)
- **分析时间**: ${new Date().toLocaleString('zh-CN')}

> 💡 *此分析由 AI 助手提供，结合人工判断进行决策。*`;

          github.rest.issues.createComment({
            issue_number: issueNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: analysis
          });

    - name: Issue Summary
      run: |
        echo "## 🎯 Issue 分析完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 分析结果" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 完成Issue可行性分析" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 分析Issue #${{ github.event.issue.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 使用 GLM-4.6 模型" >> $GITHUB_STEP_SUMMARY
        echo "- 💬 分析评论已添加到Issue" >> $GITHUB_STEP_SUMMARY