name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, edited]
  push:
    branches: [master]

jobs:
  code-review:
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Code Analysis

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Files
      id: files
      run: |
        echo "Analyzing files..."

        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          FILES=$(git diff --name-only "$BASE" "$HEAD" | tr '\n' ' ')
        else
          # For push, get all files in the repo
          FILES=$(find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.yml" -o -name "*.md" 2>/dev/null | tr '\n' ' ')
        fi

        echo "files=$FILES" >> $GITHUB_OUTPUT
        echo "Files: $FILES"

    - name: AI Review
      id: ai-review
      if: steps.files.outputs.files != ''
      env:
        API_KEY: ${{ secrets.UPSTREAM_API_KEY }}
      run: |
        echo "Starting AI review..."

        FILES="${{ steps.files.outputs.files }}"
        REQUEST_BODY='{"model": "glm-4.6", "max_tokens": 1500, "temperature": 0.3, "messages": [{"role": "user", "content": "Analyze code changes in: '"$FILES"'. Provide brief suggestions in Chinese."}]}'

        HTTP_CODE=$(curl -s \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $API_KEY" \
          -d "$REQUEST_BODY" \
          "https://apis.iflow.cn/v1/chat/completions" \
          -w "%{http_code}" \
          -o response.json)

        echo "HTTP status: $HTTP_CODE"

        if [ "$HTTP_CODE" = "200" ]; then
          if command -v jq >/dev/null 2>&1; then
            CONTENT=$(jq -r '.choices[0].message.content // "No content"' response.json)
          else
            CONTENT=$(cat response.json | grep -o '"content":"[^"]*"' | cut -d'"' -f4 || "Parse error")
          fi

          echo "AI Response: $CONTENT"
          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

        else
          echo "API failed: $HTTP_CODE"
          cat response.json
          exit 1
        fi

    - name: PR Comment
      if: github.event_name == 'pull_request' && steps.ai-review.outputs.review != ''
      uses: actions/github-script@v7
      with:
        script: |
          const review = `${{ steps.ai-review.outputs.review }}`;
          const comment = `## 🤖 AI 代码审查

${review}

---
- **模型**: GLM-4.6
- **时间**: ${new Date().toLocaleString('zh-CN')}
- **文件**: \`${{ steps.files.outputs.files }}\`

> AI生成，仅供参考。`;

          if (context.payload.pull_request) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Summary
      if: always()
      run: |
        echo "## 审查结果" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.ai-review.outcome }}" = "success" ]; then
          echo "✅ 审查完成" >> $GITHUB_STEP_SUMMARY
          echo "- AI模型: GLM-4.6" >> $GITHUB_STEP_SUMMARY
          echo "- 文件: ${{ steps.files.outputs.files }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 审查失败" >> $GITHUB_STEP_SUMMARY
        fi

  issue-review:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    name: Issue Analysis

    steps:
    - name: Issue Analysis
      id: issue-review
      env:
        API_KEY: ${{ secrets.UPSTREAM_API_KEY }}
      run: |
        TITLE="${{ github.event.issue.title }}"
        BODY="${{ github.event.issue.body }}"
        AUTHOR="${{ github.event.issue.user.login }}"

        REQUEST_BODY='{"model": "glm-4.6", "max_tokens": 1200, "temperature": 0.3, "messages": [{"role": "user", "content": "Analyze issue: '"$TITLE"' by '"$AUTHOR"'. Content: '"$BODY"'. Provide brief assessment in Chinese."}]}'

        HTTP_CODE=$(curl -s \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $API_KEY" \
          -d "$REQUEST_BODY" \
          "https://apis.iflow.cn/v1/chat/completions" \
          -w "%{http_code}" \
          -o issue_response.json)

        if [ "$HTTP_CODE" = "200" ]; then
          if command -v jq >/dev/null 2>&1; then
            CONTENT=$(jq -r '.choices[0].message.content // "No content"' issue_response.json)
          else
            CONTENT=$(cat issue_response.json | grep -o '"content":"[^"]*"' | cut -d'"' -f4 || "Parse error")
          fi

          echo "issue_review<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

        else
          echo "Issue analysis failed: $HTTP_CODE"
          exit 1
        fi

    - name: Issue Comment
      uses: actions/github-script@v7
      with:
        script: |
          const analysis = `## 🔍 Issue分析

${{ steps.issue-review.outputs.issue_review }}

---
- **Issue**: #${context.issue.number}
- **分析**: AI Assistant (GLM-4.6)
- **时间**: ${new Date().toLocaleString('zh-CN')}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: analysis
          });